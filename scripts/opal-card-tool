#!/usr/bin/python3

import argparse
import csv
import datetime
import getpass
import itertools
import lxml.html
import os
import pickle
import requests
import subprocess
import sys
import tempfile


VERSION = 3

CACHE_DIR = os.environ.get("XDG_CACHE_HOME", os.path.expanduser("~/.cache/opal-card-tool"))
PICKLE_FILE = os.path.join(CACHE_DIR, "pickle")

OPAL_BASE = "https://www.opal.com.au"
LOGIN_URL = OPAL_BASE + "/login/registeredUserUsernameAndPasswordLogin"
CARD_DETAILS_URL = OPAL_BASE + "/registered/getJsonCardDetailsArray"
TRANSACTION_LIST_URL = OPAL_BASE + "/registered/opal-card-transactions/opal-card-activities-list?AMonth=-1&AYear=-1&cardIndex=%d&pageIndex=%d"



def stringify(el):
    return " ".join(t.strip() for t in el.itertext()).strip()

def get_first(l):
    for x in l:
        return x

def is_weekday(d):
    return d.isoweekday() <= 5


class FatalError(Exception):
    pass

class Transaction(object):
    pass

class Card(object):
    def __init__(self):
        self.transaction_list = []

    def get_max_transaction(self):
        if self.transaction_list:
            return self.transaction_list[0].number
        else:
            return -1

    def add_transactions(self, l):
        self.transaction_list = l + self.transaction_list

class Opal(object):
    def __init__(self, username, password):
        self.version = VERSION
        self.username = username
        self.password = password

        self.session = requests.Session()
        self.cards = []

    def login(self):
        r = self.session.post(LOGIN_URL, {
            "h_username": self.username,
            "h_password": self.password,
        })
        if not r.ok:
            raise Exception("Failed to login, error code: %d" % r.status_code)

        json = r.json()
        if json["errorMessage"]:
            raise Exception("Failed to login: %s" % json["errorMessage"])

    def load(self):
        self.load_cards()
        for card in self.cards:
            self.load_transactions(card)

    def get_transaction_list_for_card(self, card_number):
        if int(card_number) < len(self.cards):
            return self.cards[int(card_number)].transaction_list

        for card in self.cards:
            if card.number == card_number:
                return card.transaction_list

    def load_cards(self):
        r = self.session.get(CARD_DETAILS_URL)
        if not r.ok:
            raise Exception("Failed to login, error code: %d" % r.status_code)

        for index, card_json in enumerate(r.json()):
            card_number = card_json["cardNumber"]

            for card in self.cards:
                if card.number == card_number:
                    break
            else:
                card = Card()
                self.cards.append(card)

            card.number = card_number
            card.name = card_json["cardNickName"]
            card.index = index

    def load_transactions(self, card):
        print("Loading transactions for", card.number, "", end="", flush=True)
        max_transaction = card.get_max_transaction()
        transaction_list = []

        for page in itertools.count(1):
            print(".", end="", flush=True)
            transaction_page = self.fetch_transaction_page(card.index, page)
            continue_paging = False

            for transaction in transaction_page:
                if transaction.number <= max_transaction:
                    continue_paging = False
                    break

                transaction_list.append(transaction)
                continue_paging = True

            if not continue_paging:
                break

        print(" done")
        card.add_transactions(transaction_list)

    def parse_transaction(self, cells):
        t = Transaction()
        t.number = int(stringify(cells["transaction number"]))
        t.timestamp = datetime.datetime.strptime(stringify(cells["date/time"]), "%a %d/%m/%Y %H:%M")
        t.mode = get_first(cells["mode"].xpath("img/@alt"))
        t.details = stringify(cells["details"])
        t.journey_number = stringify(cells["journey number"])
        t.fare_applied = stringify(cells["fare applied"])
        t.fare = stringify(cells["fare"])
        t.fare_discount = stringify(cells["discount"])
        t.amount = stringify(cells["amount"])
        return t

    def fetch_transaction_page(self, card, page):
        url = TRANSACTION_LIST_URL % (card, page)
        r = self.session.get(url)
        if not r.ok:
            raise Exception("Failed to fetch transactions, error code: %d" % r.status_code)

        doc = lxml.html.fromstring(r.text)
        headers = [stringify(th).lower() for th in doc.xpath("//table/thead//th")]

        if not headers:
            return []

        for tr in doc.xpath("//table/tbody/tr"):
            try:
                yield self.parse_transaction(dict(zip(headers, tr.getchildren())))
            except Exception:
                print("Failed to parse:", headers, lxml.html.tostring(tr))
                raise


class CommuterGraph(object):
    class gnuplot_dialect(csv.excel):
        delimiter = " "

    def __init__(self):
        self.data_am_csv, self.data_am_file = self.new_csv()
        self.data_pm_csv, self.data_pm_file = self.new_csv()
        self.plot_file = self.new_tempfile()
        self.files = [self.data_am_file, self.data_pm_file, self.plot_file]

        self.xrange_start = None
        self.xrange_end = None

    def graph(self, transaction_list):
        try:
            self.write_points(transaction_list)
            self.write_plot_command()
            self.flush_files()
            self.run_gnuplot()
        finally:
            self.cleanup()

    def new_tempfile(self):
        return tempfile.NamedTemporaryFile(
            mode="w",
            encoding="utf-8",
            prefix="opal-card-tool-",
            delete=True,
        )

    def new_csv(self):
        f = self.new_tempfile()
        out = csv.writer(f, dialect=self.gnuplot_dialect)
        return out, f

    def get_oldest_date(self):
        oldest = datetime.datetime.now() - datetime.timedelta(days=12)
        oldest = oldest.replace(hour=0, minute=0, second=0, microsecond=0)
        return oldest

    def update_xrange(self, ts):
        if self.xrange_start is None or ts < self.xrange_start:
            self.xrange_start = ts
        if self.xrange_end is None or ts > self.xrange_end:
            self.xrange_end = ts

    def generate_point(self, transaction):
        ts = transaction.timestamp
        x_date = ts.strftime("%Y-%m-%dT00:00:00")
        y_time = ts.strftime("2000-01-01T%H:%M:00")
        y_label = ts.strftime("%H:%M")
        return [x_date, y_time, y_label]

    def write_point(self, ts, point):
        if ts.time() < datetime.time(12):
            out_csv = self.data_am_csv
        else:
            out_csv = self.data_pm_csv

        out_csv.writerow(point)

    def write_points(self, transaction_list):
        oldest_date = self.get_oldest_date()

        for transaction in transaction_list:
            if transaction.timestamp < oldest_date:
                return
            if not is_weekday(transaction.timestamp):
                continue

            self.update_xrange(transaction.timestamp)
            point = self.generate_point(transaction)
            self.write_point(transaction.timestamp, point)

    def write_plot_command(self):
        d = {
            "data_am_filename": self.data_am_file.name,
            "data_pm_filename": self.data_pm_file.name,
            "xrange_start": self.xrange_start - datetime.timedelta(hours=24),
            "xrange_end": self.xrange_end + datetime.timedelta(hours=24),
        }
        self.plot_file.write(R"""
set timefmt '%Y-%m-%dT%H:%M:%S'

set xlabel 'Date'
set xdata time
set format x '%a %d'
set xtics 86400 scale 1.0,0.0
set xrange [ '{xrange_start}' : '{xrange_end}' ]

set ylabel 'Time'
set ydata time
set format y '%H:%M'
set yrange [ '2000-01-01T06:00:00' : '2000-01-01T23:00:00' ]

set key box opaque 
set terminal qt \
    persist \
    title 'opal-card-tool graph' \
    font 'Sans,10' \
    enhanced \
    size 1000,700

plot \
    '{data_pm_filename}' \
        using 1:2 \
        with line \
        title 'Afternoon departure time' \
    , \
    '{data_pm_filename}' \
        using 1:2:3 \
        with labels \
        offset 0,1 \
        notitle \
    , \
    '{data_am_filename}' \
        using 1:2 \
        with line \
        title 'Morning departure time' \
    , \
    '{data_am_filename}' \
        using 1:2:3 \
        with labels \
        offset 0,1 \
        notitle \
""".format(**d))

    def flush_files(self):
        for f in self.files:
            f.flush()

    def cleanup(self):
        for f in self.files:
            try:
                f.close()
            except:
                pass

    def run_gnuplot(self):
        subprocess.check_call([
            "gnuplot",
            self.plot_file.name,
        ])

def graph_commuter(transaction_list):
    g = CommuterGraph()
    g.graph(transaction_list)

def print_transaction_list(transaction_list):
    headers = []
    headers.extend(["number", "timestamp"])
    headers.extend(h for h in sorted(transaction_list[0].__dict__.keys()) if h not in headers)

    out = csv.DictWriter(sys.stdout, headers)
    out.writeheader()
    for transaction in transaction_list:
        out.writerow(transaction.__dict__)


def print_cards(opal):
    for i, card in enumerate(opal.cards):
        print("Card", i)
        print("  number:", card.number)
        print("  name:", card.name)
        print("  transactions:", len(card.transaction_list))
        print()

def try_unpickle():
    if not os.path.isfile(PICKLE_FILE):
        return None

    with open(PICKLE_FILE, "rb") as f:
        return pickle.load(f)

def save_pickle(opal):
    if not os.path.isdir(CACHE_DIR):
        os.makedirs(CACHE_DIR)
    with open(PICKLE_FILE, "wb") as f:
        pickle.dump(opal, f)



def upgrade_opal_v2(opal):
    # example upgrade!
    opal.version = 3

def upgrade_opal(opal):
    while opal.version < VERSION:
        print("Upgrading from version", opal.version)
        upgrade_func = globals()["upgrade_opal_v%d" % opal.version]
        upgrade_func(opal)



def load_opal():
    opal = try_unpickle()

    if opal:
        upgrade_opal(opal)
    else:
        username = input("Username: ")
        password = getpass.getpass()
        opal = Opal(username, password)

    save_pickle(opal)
    return opal

def parse_args():
    parser = argparse.ArgumentParser(description="Opal card activity fetcher")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--load", action="store_true",
        help="load any new data from the Opal website"
    )
    group.add_argument("--show-cards", action="store_true",
        help="show a list of cards"
    )
    group.add_argument("--show-transactions", metavar="CARD_NUMBER",
        help="show transactions for card"
    )
    group.add_argument("--graph-commuter", metavar="CARD_NUMBER",
        help="draw commuter graph for card with gnuplot"
    )

    args = parser.parse_args()

    return args

def main():
    args = parse_args()
    opal = load_opal()

    if args.load:
        opal.login()
        opal.load()
        save_pickle(opal)

    if args.show_cards:
        print_cards(opal)

    if args.show_transactions:
        print_transaction_list(opal.get_transaction_list_for_card(args.show_transactions))

    if args.graph_commuter:
        graph_commuter(opal.get_transaction_list_for_card(args.graph_commuter))

if __name__ == "__main__":
    main()

